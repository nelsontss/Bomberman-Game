
{- |
Module : Tarefa 2
Description: Estas sao as funçoes da tarefa 2.
Copyright: Nelson Sousa, Rui Ŕibeiro
Estas funçoes tem como objetivo responder a comandos efectuados pelos jogadores.                                           
                                                                                                                       -}
module Main where
import System.Environment
import Data.Char

{- | Esta funçao, e responsavel por executar os comandos que o jogador pretende.Com base noutras funçoes.

=Exemplos

>>>move ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","+ 3 1","! 3 4","0 1 1"] 0 'R' =
["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","+ 3 1","! 3 4","0 2 1"]
-}
move :: 
 [String] -- ^ mapa recibido 
   -> Int -- ^ numero do jogador recibido
      -> Char -- ^ comando executado pelo jogador
         -> [String] -- ^ mapa com o resultado da açao executada
move [] _ _ =  []
move m j x | x == 'U' && lJog m j /= [] = if not(temtijolo m (c,l)) then if temPrUp (moveUp m j) (c,l) == "+" ||temPrUp (moveUp m j) (c,l) == "!" then retiraPrUp (acrescentaPrUp_Jog(moveUp m j) j a) (c,l) else moveUp m j else m
           | x == 'D' && lJog m j /= [] = if not(temtijolo m (c1,l1)) then if temPrUp (moveDown m j) (c1,l1) == "+" ||temPrUp (moveDown m j) (c1,l1) == "!" then retiraPrUp (acrescentaPrUp_Jog(moveDown m j) j b) (c1,l1) else moveDown m j else m
           | x == 'L' && lJog m j /= [] = if not(temtijolo m (c2,l2)) then if temPrUp (moveLeft m j) (c2,l2) == "+" ||temPrUp (moveLeft m j) (c2,l2) =="!" then retiraPrUp (acrescentaPrUp_Jog(moveLeft m j) j e) (c2,l2) else moveLeft m j else m
           | x == 'R' && lJog m j /= [] = if not(temtijolo m (c3,l3)) then if temPrUp (moveRight m j) (c3,l3) == "+" ||temPrUp (moveRight m j) (c3,l3) =="!" then retiraPrUp (acrescentaPrUp_Jog(moveRight m j) j d) (c3,l3) else moveRight m j else m
           | x == 'B' && lJog m j /= [] = poeBomba m j
           | otherwise = m
   where (_,c,l,_,_) = retiraInfJog (lJog (moveUp m j) j)
         (_,c1,l1,_,_) = retiraInfJog (lJog (moveDown m j) j)
         (_,c2,l2,_,_) = retiraInfJog (lJog (moveLeft m j) j)
         (_,c3,l3,_,_) = retiraInfJog (lJog (moveRight m j) j)
         a = temPrUp (moveLeft m j) (c,l)
         b = temPrUp (moveLeft m j) (c1,l1)
         e = temPrUp (moveLeft m j) (c2,l2)
         d = temPrUp (moveLeft m j) (c3,l3)
{- | Esta funçao é responsavel verificar se tem tijolo na coordenada para onde o jogador pretende se mover.
=Exemplos

>>>temtijolo ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","+ 3 1","! 3 4","0 1 1"] ("3","1") = True
-}
temtijolo :: 
  [String] -- ^ mapa recibido    
     -> (String,String) -- ^ Cordenadas para onde o jogador se vai mover.
        -> Bool -- ^ Resultado da verifcaçao
temtijolo [] _ = False
temtijolo l1 (c,l) | take 1 (drop (read c :: Int) (unlines (take 1 (drop (read l :: Int) l1)))) == "?" = True
                   | otherwise = False 

{- | Esta funçao acrescenta um power up a um jogador caso necessario, atravez de uma auxiliar.
=Exemplos

>>>acrescentaPrUp_Jog ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","+ 3 1","! 3 4","0 1 1"] 0 "+" = 
["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","+ 3 1","! 3 4","0 1 1 +"]
-}
acrescentaPrUp_Jog :: 
  [String] -- ^ mapa recebido
     -> Int -- ^ jogador
        -> String-- ^ power up 
           -> [String] -- ^ resultado de adicinar o power up
acrescentaPrUp_Jog m j p = aux m j [] 
  where aux [] j new  = new
        aux (h:ts) j new  | head h == intToDigit j = aux ts j (new ++ [(acrescentaPrUp_JogAux p h)]) 
                          | otherwise = aux ts j (new ++ [h]) 

{- | Esta e a auxiliar da funçao acrescentaPrUp_Jog.
=Exemplos

>>>acrescentaPrUp_JogAux "0 1 1" "+" = "0 1 1 +"
-}
acrescentaPrUp_JogAux :: 
  String -- ^ linha que representa o jogador no mapa 
    -> String -- ^ power up 
       -> String-- ^ linha resultante de dicionar o power up.
acrescentaPrUp_JogAux [] _ = []                          
acrescentaPrUp_JogAux _ [] = []
acrescentaPrUp_JogAux p lista | p == "+" = jg ++  " " ++ c ++ " " ++ l ++ " " ++ b ++"+" ++ r 
                             | p == "!" = jg ++  " " ++ c ++ " " ++ l ++ " " ++ b ++ "!" ++ r    
           where (jg,c,l,b,r) = retiraInfJog lista

{- | Esta funçao verifica se tem um power up nas coordenadas para as quais o jogador se vai mover, e em caso afirmativo devolve o power up em questao.
=Exemplos

>>>TemPrUp ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","+ 3 1","! 3 4","0 1 1"] ("3","1") = "+"
-}
temPrUp ::
  [String] -- ^ mapa recebido
      -> (String,String) -- ^ coordenadas para onde o jogador se vai mover 
         -> String -- ^ power up, ou caso nao exista lista []
temPrUp [] _ = []
temPrUp (h:t) (c,l) | (cp == c && lp == l) && (s == "+" || s == "!")  = s
                    | otherwise = temPrUp t (c,l)
       where (s,cp,lp,_,_) = retiraInfJog h

{- | Esta funçao retira um power up do mapa , quando por exemplo, este e apanhado pelo jogador
=Exemplos

>>>retiraPrUp ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","+ 3 1","! 3 4","0 1 1"] ("3","1") = 
["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","0 1 1"]    
-}
retiraPrUp :: 
  [String] -- ^ mapa recebido
    -> (String,String) -- ^ coordenadas onde e necessario retirar o power up 
       -> [String] -- ^ mapa resultante de retirar o power up
retiraPrUp [] _ = []
retiraPrUp (h:t) (c,l) = aux (h:t) (c,l) []
    where aux [] (c,l) new = new
          aux (h:t) (c,l) new | veInf (drop 2 h) == c && veInf (drop (2 + length (veInf (drop 2 h)) + 1 ) h) == l && (head h == '+'|| head h == '!')  = new ++ t
                              | otherwise =  aux t (c,l) (new ++ [h])
          
{- | Esta funçao ordena o mapa , segundo o pretendido. Mapa, power ups de bombas, power ups de flames, bombas e por fim jogadores.
=Exemplos

>>>OrdenaMapa ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","+ 3 1","0 1 1"] = 
["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","+ 3 1","0 1 1"]   
-} 
ordenaMapa :: 
  [String] -- ^ mapa recebido 
     -> [String] -- ^ mapa ordenado
ordenaMapa (h:t) = filter (\h -> head h == '#') (h:t) ++ filter (\h -> head h == '+' ) (h:t) ++ filter (\h -> head h == '!' ) (h:t) ++ ordenabombas(filter (\h -> head h == '*') (h:t)) ++ filter (\h -> isDigit (head h)) (h:t)


{- | Esta funçao e responsavel por ordenar as bombas postas pelos jogadores consoante a posiçao que ocupam no mapa.
=Exemplos

>>>Ordenabombas ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","+ 3 1","* 2 2 0 1 10","* 1 2 0 1 8","0 1 1 +"] = 
["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","+ 3 1","* 1 2 0 1 10","* 2 2 0 1 8","0 1 1 +"]   
-}
ordenabombas :: 
  [String] -- ^ lista de bombas 
     -> [String] -- ^ lista de bombas ordenadas
ordenabombas [] = []
ordenabombas [h] = [h]
ordenabombas (h:y:t) | (read l :: Int) < (read e :: Int) = [h] ++ ordenabombas (y:t)
                     | (read l :: Int) == (read e :: Int) && (read c :: Int) <= (read d :: Int) = [h] ++ ordenabombas (y:t)
                     | otherwise = [y] ++ ordenabombas (h:t)
    where (_,c,l,_,_,_) = retiraInfBomba h
          (_,d,e,_,_,_) = retiraInfBomba y 

{- | Esta funçao e responsavel por colocar bombas no mapa.
=Exemplos

>>>poeBomba ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","+ 3 1","* 2 2 0 1 10","* 1 2 0 1 8","0 1 1 +"] = 
["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","+ 3 1","* 1 2 0 1 10","* 2 2 0 1 8","0 1 1 +"]   
-}
poeBomba  :: 
  [String] -- ^ mapa recebido 
     -> Int -- ^ jogador 
        -> [String] -- ^ resultado de adicionar a bomba ao mapa 
poeBomba m j = if nTemBomba (cordBombas (bombas m)) (c,l) && podePorBomba (bombas m) (length b) j then ordenaMapa (m ++ ["* " ++ c ++ " " ++ l ++ " " ++ jg ++ " " ++ show(1+length r) ++ " "++ "10"])   else m 
     where (jg,c,l,b,r) = retiraInfJog (lJog m j)
 
{- | Esta funçao verifica se um jogador pode por uma bomba, tendo em conta as bombas que ja pos no mapa e os power ups de bomba que tem.
=Exemplos

>>>poeBomba ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","+ 3 1","0 1 1 +"] 1 0  = True 
-}        
podePorBomba :: 
  [String] -- ^ mapa recebido 
     -> Int -- ^ numero de power ups de bomba
        -> Int -- ^ jogador
           -> Bool -- ^ resultado da verificaçao
podePorBomba [] _ j = True
podePorBomba m n j | length (bombasjog m j) < 1 + n = True
                   | otherwise = False
                
{- | Esta funçao faz a lista de bombas postas por um determinado jogador.
=Exemplos


>>>bombasjog ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","+ 3 1","* 2 2 0 1 10","* 1 2 0 1 8","0 1 1 +"] 0 =
["* 2 2 0 1 10","* 1 2 0 1 8"]    
-}
bombasjog :: 
  [String] -- ^ mapa recebido
     -> Int-- ^ numero do jogador 
        -> [String]-- ^ lista de bombas do jogador
bombasjog l j = filter (eBombaDoJog j)  l

{- | Esta funçao verifica se determinada bomba posta no mapa e de determindado jogador.
=Exemplos


>>>eBombaDoJog 0 "* 2 2 0 1 10" = True 
-}
eBombaDoJog :: 
  Int -- ^ jogador 
     -> String -- ^ string que representa a bomba
       -> Bool -- ^ resultado da verificaçao   
eBombaDoJog j [] = False
eBombaDoJog j l | show j == jg = True
                | otherwise = False   
            where (_,_,_,jg,_,_) = retiraInfBomba l
            
{- | Esta funçao traduz as informaçoes de uma bomba para um produto cartesiano, de forma a conseguir operar melhor os componentes.
=Exemplos


>>>retiraInfBomba "* 2 2 0 1 10" = ("*","2","2","0","1","10") 
-}
retiraInfBomba :: 
   String -- ^ linha que representa a bomba 
      -> (String,String,String,String,String,String) -- ^ (simbolo,coluna,linha,jogador,raio,tempo)
retiraInfBomba [] = ([],[],[],[],[],[])
retiraInfBomba lista = (s,c,l,jg,r,t) 
      where  s = take 1 lista
             c = veInf (drop 2 lista)
             l = veInf (drop (2 + length c + 1 ) lista)
             jg = veInf (drop (2 + length c + 1 + length l + 1) lista)
             r = veInf (drop (2 + length c + 1 + length l + 1 + length jg + 1) lista)
             t = veInf (drop (2 + length c + 1 + length l + 1 + length jg + 1 + length r + 1) lista)

{- | Esta funçao traduz as informaçoes de um jogador para um produto cartesiano, de forma a conseguir operar melhor os componentes.
=Exemplos


>>>retiraInfJog "0 1 1 +!!" = ("0","1","1","+","!!") 
-}
retiraInfJog :: 
    String -> -- ^ linha que representa o jogador 
         (String,String,String,String,String) -- ^ (jogador,coluna,linha,power up de bombas,power up de flames)
retiraInfJog [] = ([],[],[],[],[])
retiraInfJog lista = (j,c,l,b,r)
      where j = take 1 lista 
            c = veInf (drop 2 lista)
            l = veInf (drop (2 + length c + 1 ) lista)
            b = filter (\h -> h == '+') (veInf (drop (2 + length c + 1 + length l + 1) lista))
            r = filter (\h -> h == '!') (veInf (drop (2 + length c + 1 + length l + 1) lista))

{- | Esta funçao retira do mapa a linha que representa um determindado jogador
=Exemplos


>>>lJog ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","+ 3 1","* 2 2 0 1 10","* 1 2 0 1 8","0 1 1 +"] 0 = "0 1 1 +" 
-}
lJog :: 
   [String] -- ^ mapa recebido
      -> Int -- ^ numero do jogador
         -> String -- ^ linha que representa o jogador
lJog [] j = []
lJog (h:t) j | head h == intToDigit j = h
             | otherwise = lJog t j


{- | Esta funçao verifica se existe alguma bomba posta no mapa na posiçao onde o jogador quer por uma bomba.
=Exemplos


>>>nTemBomba [("2","2"),("1","2")] ("3","3") = True 
-}
nTemBomba :: 
   [(String,String)] -- ^ lista com as coordenadas das bombas que estao no mapa 
      -> (String,String) -- ^ cordenadas onde o jogador quer por a bomba
          -> Bool -- ^ resultado da verificaçao
nTemBomba [] cj = True
nTemBomba (h:t) cj | h == cj = False
                   | otherwise = nTemBomba t cj

{- | Esta funçao faz a lista de todas as bombas do mapa.
=Exemplos


>>>bombas ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","+ 3 1","* 2 2 0 1 10","* 1 2 0 1 8","0 1 1 +"] = 
["* 2 2 0 1 10","* 1 2 0 1 8"] 
-}
bombas :: 
   [String] -- ^ mapa recebido 
       -> [String]-- ^ lista de bombas
bombas (h:t) = filter (\h -> head h == '*') (h:t)

{- | Esta funçao transforma a lista de bombas na lista com as respetivas coordenadas
=Exemplos


>>>cordBombas ["* 2 2 0 1 10","* 1 2 0 1 8"]  = [("2","2"),("1","2")]
-}
cordBombas :: [String] -> [(String,String)]
cordBombas [] = []
cordBombas (h:t) = ( c , l ) : cordBombas t
   where c = veInf (drop 2 h)
         l = veInf (drop (2 + length c + 1) h)

{- | Esta funçao altera as coordenadas do jogador, movendo-o para a coluna à direita (se possível)

=Exemplos

>>>moveRight ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","0 1 1"] =
["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","0 2 1"]    
-}              

moveRight :: 
   [String] -- ^ mapa recebido 
       -> Int  -- ^ jogador
          -> [String] -- ^ mapa com o resultado de mover o jogador
moveRight m j = aux m j [] t
  where aux [] j new t = new
        aux (h:ts) j new t | head h == intToDigit j = aux ts j (new ++ [(alteracoordRight h t)]) t
                           | otherwise = aux ts j (new ++ [h]) t
        t = length (head m)

{- | Esta funçao e a auxiliar da __moveRight__, que altera a linha do jogador.
=Exemplos

>>>movealteracoordRight "0 1 1" 0 = "0 2 1"    
-}
alteracoordRight ::
   String -- ^ linha que representa o jogador 
      -> Int -- ^ tamanho do mapa
         -> String -- ^ linha alterada
alteracoordRight [] t = []
alteracoordRight lista t =  if (read c :: Int) < (t-2) && odd (read l :: Int) then  jg ++  " " ++ show ((read c :: Int)  + 1) ++ " " ++ l ++ " " ++ b ++ r 
                                                                              else jg ++  " " ++ c ++ " " ++ l ++ " " ++ b ++ r 
      where (jg,c,l,b,r) = retiraInfJog lista

{- | Esta funçao altera as coordenadas do jogador, movendo-o para a coluna à esquerda (se possível)

=Exemplos

>>>moveLeft ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","0 2 1"] =
["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","0 1 1"]    
-}

moveLeft ::
   [String] -- ^ mapa recebido
       -> Int -- ^ jogador
          -> [String] -- ^ mapa com o resultado de mover o jogador
moveLeft m j = aux m j [] t
  where aux [] j new t = new
        aux (h:ts) j new t | head h == intToDigit j = aux ts j (new ++ [(alteracoordLeft h t)]) t
                           | otherwise = aux ts j (new ++ [h]) t
        t = length (head m)

{- | Esta funçao e a auxiliar da __moveLeft__, que altera a linha do jogador.
=Exemplos

>>>movealteracoordLeft "0 2 1" 0 = "0 1 1"    
-}
alteracoordLeft :: 
  String -- ^ linha que representa o jogador 
     -> Int -- ^ tamanho do mapa
        -> String-- ^ linha alterada
alteracoordLeft [] t = []
alteracoordLeft lista t = if (read c :: Int) > 1 && odd (read l :: Int) then jg ++  " " ++ show ((read c :: Int) - 1) ++ " " ++ l ++ " " ++ b ++ r 
                                                                        else jg ++  " " ++ c ++ " " ++ l ++ " " ++ b  ++ r 
      where (jg,c,l,b,r) = retiraInfJog lista

{- | Esta funçao altera as coordenadas do jogador, movendo-o para a linha abaixo (se possível)

=Exemplos

>>>moveDown ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","0 1 1"] =
["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","0 1 2"]    
-}

moveDown :: 
   [String] -- ^ recebido 
      -> Int -- ^ jogador
          -> [String] -- ^ mapa com o resultado de mover o jogador
moveDown m j = aux m j [] t
  where aux [] j new t = new
        aux (h:ts) j new t | head h == intToDigit j = aux ts j (new ++ [(alteracoordDown h t)]) t
                           | otherwise = aux ts j (new ++ [h]) t
        t = length (head m)
      
{- | Esta funçao e a auxiliar da __moveDown__, que altera a linha do jogador.
=Exemplos

>>>movealteracoordDown "0 1 1" 0 = "0 1 2"    
-}
alteracoordDown :: 
   String -- ^ linha que representa o jogador 
      -> Int -- ^ tamanho do mapa
         -> String-- ^ linha alterada
alteracoordDown [] t = []
alteracoordDown lista t = if (read l :: Int) < t-2 && odd (read c ::Int) then jg ++  " " ++ c ++ " " ++ show ((read l :: Int) + 1) ++ " " ++ b ++ r  
                                                                         else jg ++  " " ++ c ++ " " ++ l ++ " " ++ b ++ r 
      where (jg,c,l,b,r) = retiraInfJog lista

{- | Esta funçao altera as coordenadas do jogador, movendo-o para a linha acima (se possível)

=Exemplos

>>>moveUp ["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","0 1 2"] =
["#######","#  ?  #","# # # #","#     #","# #?# #","#  ?  #","#######","! 3 4","0 1 1"]    
-}

moveUp :: 
  [String] -- ^ mapa recebido    
     -> Int -- ^ jogador
        -> [String] -- ^ mapa com o resultado de mover o jogador
moveUp m j = aux m j [] t
  where aux [] j new t = new
        aux (h:ts) j new t | head h == intToDigit j = aux ts j (new ++ [(alteracoordUp h t)]) t
                           | otherwise = aux ts j (new ++ [h]) t
        t = length (head m)

{- | Esta funçao e a auxiliar da __moveUp__, que altera a linha do jogador.
=Exemplos

>>>movealteracoordUp "0 1 2" 0 = "0 1 1"    
-}
alteracoordUp :: 
   String -- ^ linha que representa o jogador
      -> Int -- ^ tamanho do mapa
          -> String -- ^ linha alterada
alteracoordUp [] t = []
alteracoordUp lista t = if (read l :: Int) > 1 && odd (read c ::Int) then jg ++  " " ++ c ++ " " ++ show ((read l :: Int) - 1) ++ " " ++ b  ++ r 
                                                                     else jg ++  " " ++ c ++ " " ++ l ++ " " ++ b  ++ r 
      where (jg,c,l,b,r) = retiraInfJog lista
          
{- | Esta funçao retira a informaçao contida nas linha a baixo do mapa, sabendo que estas estao espaçadas entre si.
=Exemplos

>>>VeInf "0 1 2" 0 = "0"    
-}
veInf :: 
   String -- ^ linha com a informaçao   
      -> String -- ^ informaçao retirada
veInf [] = []
veInf (h:t) = aux [] (h:t)
   where aux inf [] = inf
         aux inf (h:t) | h /= ' ' =  h : (aux inf t)
                       | h == ' ' = inf        
                       


main :: IO ()
main = do a <- getArgs
          let p = a !! 0
          let c = a !! 1
          w <- getContents
          if length a == 2 && length p == 1 && isDigit (head p) && length c == 1 && head c `elem` "UDLRB"
             then putStr $ unlines $ move (lines w) (read p) (head c)
             else putStrLn "Parâmetros inválidos"
