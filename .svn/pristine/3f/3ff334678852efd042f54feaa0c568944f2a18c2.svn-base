import Data.Char
import System.Environment


move :: [String] -> Int -> Char -> [String]
move [] j c =  []
move m j 'U' = moveUp m j
move m j 'D' = moveDown m j
move m j 'L' = moveLeft m j 
move m j 'R' = moveRight m j
move m j 'B' = poeBomba m j

ordenaMapa :: [String] -> [String]
ordenaMapa (h:t) = filter (\h -> head h == '#') (h:t) ++ filter (\h -> head h == '+' ) (h:t) ++ filter (\h -> head h == '!' ) (h:t) ++ filter (\h -> head h == '*') (h:t) ++ filter (\h -> isDigit (head h)) (h:t)

poeBomba  :: [String] -> Int -> [String]
poeBomba m j = if nTemBomba (cordBombas (bombas m)) (c,l) && podePorBomba (bombas m) (length b) j then ordenaMapa (m ++ ["* " ++ c ++ " " ++ l ++ " " ++ jg ++ " " ++ show(length r) ++ " "++ "10"])   else m 
     where (jg,c,l,b,r) = retiraInfJog (lJog m j)
        
podePorBomba :: [String] -> Int -> Int -> Bool
podePorBomba [] _ j = True
podePorBomba m n j | length (bombasjog m j) < n = True
                   | otherwise = False


bombasjog :: [String] -> Int -> [String]
bombasjog l j = filter (eBombaDoJog j)  l

eBombaDoJog :: Int -> String -> Bool    
eBombaDoJog j [] = False
eBombaDoJog j l | show j == jg = True
                | otherwise = False   
            where (s,c,l,jg,r,t) = retiraInfBomba l
            

retiraInfBomba :: String -> (String,String,String,String,String,String)
retiraInfBomba [] = ([],[],[],[],[],[])
retiraInfBomba lista = (s,c,l,jg,r,t) 
      where  s = take 1 lista
             c = veInf (drop 2 lista)
             l = veInf (drop (2 + length c + 1 ) lista)
             jg = veInf (drop (2 + length c + 1 + length l + 1) lista)
             r = veInf (drop (2 + length c + 1 + length l + 1 + length jg + 1) lista)
             t = veInf (drop (2 + length c + 1 + length l + 1 + length jg + 1 + length r + 1) lista)

retiraInfJog :: String -> (String,String,String,String,String)
retiraInfJog [] = ([],[],[],[],[])
retiraInfJog lista = (j,c,l,b,r)
      where j = take 1 lista 
            c = veInf (drop 2 lista)
            l = veInf (drop (2 + length c + 1 ) lista)
            b = veInf (drop (2 + length c + 1 + length l + 1) lista)
            r = veInf (drop (2 + length c + 1 + length l + 1 + length b + 1) lista)

lJog :: [String] -> Int -> String
lJog [] j = []
lJog (h:t) j | head h == intToDigit j = h
             | otherwise = lJog t j



nTemBomba :: [(String,String)] -> (String,String) -> Bool
nTemBomba [] cj = True
nTemBomba (h:t) cj | h == cj = False
                   | otherwise = nTemBomba t cj


bombas :: [String] -> [String]
bombas (h:t) = filter (\h -> head h == '*') (h:t)

cordBombas :: [String] -> [(String,String)]
cordBombas [] = []
cordBombas (h:t) = ( c , l ) : cordBombas t
   where c = veInf (drop 2 h)
         l = veInf (drop (2 + length c + 1) h)

moveRight :: [String] -> Int -> [String]
moveRight m j = aux m j [] t
  where aux [] j new t = new
        aux (h:ts) j new t | head h == intToDigit j = aux ts j (new ++ [(alteracoordRight h t)]) t
                           | otherwise = aux ts j (new ++ [h]) t
        t = length (head m)


alteracoordRight :: String -> Int -> String
alteracoordRight [] t = []
alteracoordRight lista t =  if (read c :: Int) < (t-2) && odd (read l :: Int) then jg ++  " " ++ show ((read c :: Int)  + 1) ++ " " ++ l ++ " " ++ b ++ " " ++ r 
                                                                              else jg ++  " " ++ c ++ " " ++ l ++ " " ++ b ++ " " ++ r 
      where (jg,c,l,b,r) = retiraInfJog lista

moveLeft :: [String] -> Int -> [String]
moveLeft m j = aux m j [] t
  where aux [] j new t = new
        aux (h:ts) j new t | head h == intToDigit j = aux ts j (new ++ [(alteracoordLeft h t)]) t
                           | otherwise = aux ts j (new ++ [h]) t
        t = length (head m)


alteracoordLeft :: String -> Int -> String
alteracoordLeft [] t = []
alteracoordLeft lista t = if (read c :: Int) > 1 && odd (read l :: Int) then jg ++  " " ++ show ((read c :: Int) - 1) ++ " " ++ l ++ " " ++ b ++ " " ++ r 
                                                                        else jg ++  " " ++ c ++ " " ++ l ++ " " ++ b ++ " " ++ r 
      where (jg,c,l,b,r) = retiraInfJog lista

moveDown :: [String] -> Int -> [String]
moveDown m j = aux m j [] t
  where aux [] j new t = new
        aux (h:ts) j new t | head h == intToDigit j = aux ts j (new ++ [(alteracoordDown h t)]) t
                           | otherwise = aux ts j (new ++ [h]) t
        t = length (head m)
      

alteracoordDown :: String -> Int -> String
alteracoordDown [] t = []
alteracoordDown lista t = if (read l :: Int) < t-2 && odd (read c ::Int) then jg ++  " " ++ c ++ " " ++ show ((read l :: Int) + 1) ++ " " ++ b ++ " " ++ r  
                                                                         else jg ++  " " ++ c ++ " " ++ l ++ " " ++ b ++ " " ++ r 
      where (jg,c,l,b,r) = retiraInfJog lista






moveUp :: [String] -> Int -> [String]
moveUp m j = aux m j [] t
  where aux [] j new t = new
        aux (h:ts) j new t | head h == intToDigit j = aux ts j (new ++ [(alteracoordUp h t)]) t
                           | otherwise = aux ts j (new ++ [h]) t
        t = length (head m)


alteracoordUp :: String -> Int -> String
alteracoordUp [] t = []
alteracoordUp lista t = if (read l :: Int) > 1 && odd (read c ::Int) then jg ++  " " ++ c ++ " " ++ show ((read l :: Int) - 1) ++ " " ++ b ++ " " ++ r 
                                                                     else jg ++  " " ++ c ++ " " ++ l ++ " " ++ b ++ " " ++ r 
      where (jg,c,l,b,r) = retiraInfJog lista
          

veInf :: String -> String 
veInf [] = []
veInf (h:t) = aux [] (h:t)
   where aux inf [] = inf
         aux inf (h:t) | h /= ' ' =  h : (aux inf t)
                       | h == ' ' = inf        



main :: IO ()
main = do a <- getArgs
          let p = a !! 0
          let c = a !! 1
          w <- getContents
          if length a == 2 && length p == 1 && isDigit (head p) && length c == 1 && head c `elem` "UDLRB"
             then putStr $ unlines $ move (lines w) (read p) (head c)
             else putStrLn "Parâmetros inválidos"
